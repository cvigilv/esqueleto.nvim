==============================================================================
                                          *esqueleto.nvim* or just *esqueleto*

Template files reduce boilerplate when creating a new file with some specific
structure. A common use case for this is the shebang preamble (`#!`) and it's
various styles or forms depending on it's intended use.

|esqueleto.nvim| intends to make the use of templates or "skeletons" as easy
and straightfoward as possible. This package adds a prompt for inserting an
specific template when creating a new file that matches an specific file name
or type.


==============================================================================
                                                                     *premise*

|esqueleto| intends to provide a minimal, modular package that implements two
main functionalities for easier use of skeleton files: (1) detection and
prioritization of file patterns and (2) managing multiple templates per
pattern through a simple template file type (refer to |setup| for more
information in how to setup the plugin).

First, |esqueleto| prioritizes matching complete file names, e.g. for template
README.md or LICENSE, to later match over filetypes, e.g. adding an specific
shebang or header to all Python files.

Second, |esqueleto| allows the user to have different templates for an specific
pattern, e.g. having multiple licenses for `LICENSE` file type.

Note In the |examples| section some use cases are shown in order to kick-start
     your use of |esqueleto|. Please refer to this in order to understand how
     the package works and how to make the most out of it.


==============================================================================
                                                                       *setup*

To setup |esqueleto|, tow things must be done:
    1. Setup plugin through `init.lua`
    2. Setup template directory

First, |esqueleto| setup in the `init.lua` file is as follows: >
    require('esqueleto').setup({
          -- Templates directories
          directories = { '~/.config/nvim/skeleton/' },

          -- Patterns to detect for template insetion (empty by default,
          -- adding as an example)
          patterns = {
              -- File specific
              'README.md',
              'LICENSE',

              -- File type
              'python',
          },

          -- Selection prompt to use
          prompt = 'default',
    })
<
Second (and based in the setup showcased above), the following step involves
creating the templates directory file structure. For this, one must follow this
steps:
    1. Create a templates directory where all templates will be stored
    (`~/.config/nvim/skeletons/` based in the setup showcased above).
    2. Inside the main template folder, create a subdirectory for each pattern
    detected by |esqueleto| (`README.md`, `LICENSE` and `python` based
    in the setup showcased above).
    3. Add the template files for each pattern to the corresponding
    subdirectories we just created.

Based in the example seen above, the tree structure of our template directory
should be: >
    ~/.config/nvim/skeleton/
    ├── LICENSE
    ├── README.md
    └── python
<
Note In order to see what `filetype` is a specific file, one can use the
     following ex-command: >
     :lua print(vim.bo.filetype)
<

==============================================================================
                                                                    *examples*

In order to showcase the usecase of |esqueleto|, here we showcase N possible,
common use cases for templating, based in the setup showcased in the |setup|
section:

LICENSE:~
    Different type of licenses for different projects, add all licenses to its
    template directory and insert easily this templates without much work

README.md:~
    There are multiple styles of README files, some better for some project
    than others. Therefore having a collection of this files can enable a faster
    creation and launch of a project.

python:~
    Python files can be run (in Unix-like systems) as an executable. This
    executable knows what version of Python to use thanks to the use of a
    shebang in the first line. Templates for commonly used or project specific
    shebangs can be created and added for insertion when creating a new file.

    Other use case is creating template for common usecases of this filetype,
    like CLI applications, Python modules, test cases, etc.


==============================================================================
                                                                   *functions*

                                                           *esqueleto.setup()*
setup({patterns}, {directory})

    Setup for specific file {patterns} using the templates inside a
    given {directory}.

    Defaults: >
        esqueleto.setup(
            {
                directories = {vim.fn.stdpath("config") .. "/skeletons"},
                patterns = { },
                prompt = 'default',
            }
        )
<

    Parameters: ~
      • {patterns}  (table) File names or patterns to match
      • {directory} (string) An absolute or relative path to the directory
                    with templates.
      • {prompt}    (string) Selection prompt to use, can be any of `default`
                    or `ivy`. For more information, refer to the |ui|.

==============================================================================
                                                                          *ui*

|esqueleto| comes built-in with two different selection prompt options:

1. `default`, a command-line-based selection prompt that only shows the
   available templates for the given file.
2. `ivy`, a fancy, 2-pane selection prompt inspired in Emacs' Ivy selection
   minibuffer. This selection prompt has the following layout:

    ┌────────────────────────┐
    │                        │ -> Template contents will be shown here,
    │                        │      making use of your current Neovim
    │                        │      configuration (highlighing, filetype
    │      Preview pane      │      settings, UI plugins, LSP, etc.)
    │                        │
    │                        │ -> Keymaps are 'q' to quit, '<CR>' to accept
    │                        │
    ├────────────────────────┤
    │                        │ -> Available templates and their source files
    │     Selection pane     │      will be shown here. Placing cursor on a
    │                        │      of template identifier will preview it.
    └────────────────────────┘

==============================================================================

==============================================================================
                                                                 *ex-commands*

                                                                   *Esqueleto*
Esqueleto

    Prompt template insertion for current file, prioritizing patterns matching
    over file name then over file type.


==============================================================================

vim:tw=78:ts=8:et:sw=4:ft=help:norl:
